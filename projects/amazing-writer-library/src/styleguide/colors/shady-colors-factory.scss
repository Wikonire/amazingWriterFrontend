$shady-lightnings: 20%, 40%, 60%, 80%;
$color-var-names: 'primary-dark', 'primary-light', 'accent-dark', 'accent-light';
$saturation: 100%;
$shady-harmony-degrees: 15;
$harmony-types: 'shady'; //TODO for later 'analogous'

//just base palette
$base-palette: (79: (
  'primary-dark':hsl(79, 100%, 20%),
  'primary-light':hsl(79, 100%, 40%),
  'accent-dark':hsl(79, 100%, 60%),
  'accent-light':hsl(79, 100%, 80%))
) !default;

@function get-base-palette() {

}

@function append-colors($num) {
  @if not (type-of($num) == number) {
    @warn "`#{inspect($num)}` isn't a valid type. It must be a number`.";
  }
  @if not ($num <= 360 ) {
    @warn "`#{inspect($num)}` can obly be a value between 0 - 360`.";
  }
  $color-list: ();
  @each $i in $shady-lightnings {
    $color-list: append($color-list, hsl($num, 100%, $i));
  }
  @return $color-list;
}

@function apply-diff($color, $diff) {
  @each $function, $value in $diff {
    $color: ($color, $value);
  }
  @return $color;
}

//creates a palette with the colors 'primary-dark', 'primary-light', 'accent-dark', 'accent-light'
@function palette($base-color) {
  $colors: append-colors($base-color);
  $palette: ();
  @for $i from 1 through min(length($colors), length($color-var-names)) {
    $palette: map-merge($palette, (#{"$"+(nth($color-var-names, $i))} : nth($colors, $i)));
  }
  @return $palette;
}

@function accent-light($palette) {
  @if not map-has-key($palette, 'accent-light') {
    @warn "`#{inspect($palette)}` doesn't seem to have a key named `accent-light`.";
  }
  @return map-get($palette, 'accent-light');
}

@function accent-dark($palette) {
  @if not map-has-key($palette, 'accent-dark') {
    @warn "`#{inspect($palette)}` doesn't seem to have a key named `accent-dark`.";
  }
  @return map-get($palette, 'accent-dark');
}

@function primary-light($palette) {
  @if not map-has-key($palette, 'primary-light') {
    @warn "`#{inspect($palette)}` doesn't seem to have a key named `primary-light`.";
  }
  @return map-get($palette, 'primary-light');
}

@function primary-dark($palette) {
  @if not map-has-key($palette, 'primary-dark') {
    @warn "`#{inspect($palette)}` doesn't seem to have a key named `primary-dark`.";
  }
  @return map-get($palette, 'primary-dark');
}



